using System;
using System.Collections.Generic;
using System.Linq;


namespace handsOfCards
{
    class Program
    {
        static void Main(string[] args)
        {
            var playersPoints = new Dictionary<string, List<int>>();
            var input = Console.ReadLine();
            while (input != "JOKER")
            {
                string[] tokens = input.Split(':');
                string name = tokens[0];
                var cards = tokens[1]
                    .Split(", ".ToCharArray(), StringSplitOptions.RemoveEmptyEntries)
                    .Select(CalculateCardsSum).
                    ToArray();
                if (!playersPoints.ContainsKey(name))
                {
                    playersPoints[name] = new List<int>();
                }
                playersPoints[name].AddRange(cards);

                input = Console.ReadLine();
            }
            foreach (var pair in playersPoints)
            {
                var name = pair.Key;
                var cardsValue = pair.Value;
                var totalCardsSum = cardsValue.Distinct().Sum();
                Console.WriteLine($"{name}: {totalCardsSum}");
            }
        }

        static int CalculateCardsSum(string card)
        {
            var cardPowers = new Dictionary<string, int>();
            cardPowers["A"] = 14;
            cardPowers["K"] = 13;
            cardPowers["Q"] = 12;
            cardPowers["J"] = 11;
            for (int i = 2; i <= 10; i++)
            {
                cardPowers[i.ToString()] = i;
            }

            var cardTypes = new Dictionary<string, int>();
            cardTypes["S"] = 4;
            cardTypes["H"] = 3;
            cardTypes["D"] = 2;
            cardTypes["C"] = 1;

            var power = card.Substring(0, card.Length - 1);
            var type = card.Substring(card.Length - 1);

            var value = cardPowers[power] * cardTypes[type];
            return value;
        }
    }
}
