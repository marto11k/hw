using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace roliTheCoder
{
    class Program
    {
        class Event
        {
            public string Name { get; set; }
            public List<string> Participants { get; set; }
        }

        static void Main(string[] args)
        {
            var pattern = new Regex(@"(?<id>\d+)\s+#(?<name>\w+)\s*(?<participants>(?:@[a-zA-Z0-9'-]+\s*)*)");
            var events = new Dictionary<int, Event>();
            while (true)
            {
                var input = Console.ReadLine();
                if (input == "Time for Code")
                {
                    break;
                }
                var match = pattern.Match(input);
                if (match.Success)
                {
                    var id = int.Parse(match.Groups["id"].Value);
                    var eventName = match.Groups["name"].Value;
                    var participantsStr = match.Groups["participants"].Value;
                    var participants = new List<string>();
                    if (participantsStr.Length > 0)
                    {
                        participants.AddRange(participantsStr
                            .Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries));
                    }
                    if (!events.ContainsKey(id))
                    {
                        var @event = new Event
                        {
                            Name = eventName,
                            Participants = participants
                        };
                        events[id] = @event;
                    }
                    if (events[id].Name == eventName)
                    {
                        events[id].Participants.AddRange(participants);
                    }
                }
            }

            foreach (var @event in events)
            {
                @event.Value.Participants = @event.Value.Participants.Distinct().OrderBy(a => a).ToList();
            }
            foreach (var @event in events.OrderByDescending(pair => pair.Value.Participants.Count).ThenBy(pair => pair.Value.Name))
            {
                Console.WriteLine($"{@event.Value.Name} - {@event.Value.Participants.Count}");
                foreach (var participant in @event.Value.Participants)
                {
                    Console.WriteLine(participant);
                }
            }
        }
    }
}
